[{"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/index.js":"1","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/App.js":"2","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/queries.js":"3","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/pages/SavedBooks.js":"4","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/pages/SearchBooks.js":"5","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/components/Navbar.js":"6","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/API.js":"7","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/localStorage.js":"8","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/mutations.js":"9","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/auth.js":"10","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/components/LoginForm.js":"11","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/components/SignupForm.js":"12"},{"size":265,"mtime":1631042450541,"results":"13","hashOfConfig":"14"},{"size":1117,"mtime":1631044280292,"results":"15","hashOfConfig":"14"},{"size":269,"mtime":1631043766256,"results":"16","hashOfConfig":"14"},{"size":2466,"mtime":1631043700642,"results":"17","hashOfConfig":"14"},{"size":4829,"mtime":1631043723086,"results":"18","hashOfConfig":"14"},{"size":2526,"mtime":1631044861410,"results":"19","hashOfConfig":"14"},{"size":1501,"mtime":1631042112426,"results":"20","hashOfConfig":"14"},{"size":850,"mtime":1631042222234,"results":"21","hashOfConfig":"14"},{"size":1416,"mtime":1631042328216,"results":"22","hashOfConfig":"14"},{"size":1233,"mtime":1631042198508,"results":"23","hashOfConfig":"14"},{"size":2482,"mtime":1631043578928,"results":"24","hashOfConfig":"14"},{"size":3289,"mtime":1631044195644,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"497h7g",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/index.js",[],["53","54"],"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/App.js",[],"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/queries.js",[],"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/pages/SavedBooks.js",["55","56","57","58","59","60"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport {useMutation, useQuery} from '@apollo/react-hooks';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\n\nconst SavedBooks = () => {\n\n  const { loading, data} = useQuery(GET_ME);\n  const [removeBook, {error}] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || [];\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // const response = await deleteBook(bookId, token);\n      const {data} = await removeBook({\n        variables: { bookId }\n      });\n\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/pages/SearchBooks.js",["61","62","63"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nimport { SAVE_BOOK } from '../utils/mutations';\nimport {useMutation} from '@apollo/react-hooks';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, {error}] = useMutation(SAVE_BOOK );\n\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n \n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // const response = await saveBook(bookToSave, token);\n      const {data} = await saveBook({\n        variables: { input: bookToSave }\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;","/Users/nabihakhan/Documents/Code/mern-your-books/client/src/components/Navbar.js",[],"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/API.js",[],"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/localStorage.js",[],"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/mutations.js",[],"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/utils/auth.js",[],"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/components/LoginForm.js",[],"/Users/nabihakhan/Documents/Code/mern-your-books/client/src/components/SignupForm.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":17,"nodeType":"70","messageId":"71","endLine":1,"endColumn":25},{"ruleId":"68","severity":1,"message":"72","line":1,"column":27,"nodeType":"70","messageId":"71","endLine":1,"endColumn":36},{"ruleId":"68","severity":1,"message":"73","line":4,"column":10,"nodeType":"70","messageId":"71","endLine":4,"endColumn":15},{"ruleId":"68","severity":1,"message":"74","line":4,"column":17,"nodeType":"70","messageId":"71","endLine":4,"endColumn":27},{"ruleId":"68","severity":1,"message":"75","line":15,"column":23,"nodeType":"70","messageId":"71","endLine":15,"endColumn":28},{"ruleId":"68","severity":1,"message":"76","line":30,"column":14,"nodeType":"70","messageId":"71","endLine":30,"endColumn":18},{"ruleId":"68","severity":1,"message":"77","line":5,"column":10,"nodeType":"70","messageId":"71","endLine":5,"endColumn":18},{"ruleId":"68","severity":1,"message":"75","line":20,"column":21,"nodeType":"70","messageId":"71","endLine":20,"endColumn":26},{"ruleId":"68","severity":1,"message":"76","line":77,"column":14,"nodeType":"70","messageId":"71","endLine":77,"endColumn":18},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'getMe' is defined but never used.","'deleteBook' is defined but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used.","'saveBook' is defined but never used.","no-global-assign","no-unsafe-negation"]